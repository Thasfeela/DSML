import numpy as pd
import matplotlib.pyplot as plt
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix
from tensorflow.keras.datasets import mnist


(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(60000, 784)
x_test = x_test.reshape(10000, 784)


x_test


x_train[0]


plt.imshow(x_train[2].reshape((28, 28)), cmap = 'gray')


nb_model = GaussianNB()


fit_nb = nb_model.fit(x_train, y_train)


predictions = fit_nb.predict(x_test)
con_matrix = confusion_matrix(y_test, predictions)
print(con_matrix)


def diagonal_sum(con_matrix):
  sum = 0
  for i in range(10):
    for j in range(10):
      if i == j:
        sum = sum + con_matrix[i, j]
  return sum


sum = diagonal_sum(con_matrix)
print(f'Sum : {sum}')
print(f'Accuracy %: {sum/10000}')


predictions_2 = fit_nb.predict(x_train)
con_matrix_2 = confusion_matrix(y_train, predictions_2)
print(con_matrix_2)


sum_2 = diagonal_sum(con_matrix_2)
print(f'Sum : {sum_2}')
print(f'Accuracy %: {sum_2/60000}')


plt.imshow(con_matrix, cmap = 'inferno', interpolation = 'nearest')
plt.xlabel('Predictions')
plt.ylabel('Actual values')
plt.show()


plt.imshow(con_matrix_2, cmap = 'inferno', interpolation = 'nearest')
plt.xlabel('Predictions')
plt.ylabel('Actual values')
plt.show()